{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "intent-analyzer.schema.json",
  "version": "1.0.0",
  "title": "Intent Analyzer Schema",
  "description": "Input/output schema for intent analysis and task decomposition (OBSERVE phase of OODA loop)",
  "type": "object",
  "properties": {
    "input": {
      "type": "object",
      "properties": {
        "task_id": {
          "type": "string",
          "description": "Unique identifier for the analysis task"
        },
        "user_request": {
          "type": "string",
          "description": "Raw user request text to analyze"
        },
        "conversation_context": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "role": { "enum": ["user", "assistant"] },
              "content": { "type": "string" },
              "timestamp": { "type": "string", "format": "date-time" }
            }
          },
          "description": "Recent conversation history for context"
        },
        "current_state": {
          "type": "object",
          "properties": {
            "git_status": { "type": "string", "description": "Output from git status" },
            "working_directory": { "type": "string", "description": "Current working directory" },
            "open_tasks": {
              "type": "array",
              "items": { "type": "string" },
              "description": "List of open task IDs"
            },
            "recent_failures": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "task_id": { "type": "string" },
                  "agent": { "type": "string" },
                  "failure_type": { "type": "string" },
                  "timestamp": { "type": "string", "format": "date-time" }
                }
              },
              "description": "Recent task failures for context"
            }
          },
          "description": "Current system state for analysis"
        },
        "execution_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 UTC timestamp from orchestrator (mandatory)"
        }
      },
      "required": ["task_id", "user_request", "execution_timestamp"],
      "additionalProperties": false
    },
    "output": {
      "type": "object",
      "oneOf": [
        {
          "title": "Intent Analysis Success",
          "properties": {
            "status": { "const": "SUCCESS" },
            "agent": { "const": "intent-analyzer" },
            "task_id": { "type": "string" },
            "operation_type": { "const": "analyze_intent" },
            "summary": {
              "type": "string",
              "description": "1-3 sentence summary of identified intents and task structure"
            },
            "confidence": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Confidence level in intent analysis"
            },
            "execution_timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 UTC timestamp from orchestrator"
            },
            "agent_specific_output": {
              "type": "object",
              "properties": {
                "intents_identified": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "intent_type": {
                        "enum": [
                          "information_retrieval",
                          "code_implementation",
                          "code_modification",
                          "code_review",
                          "bug_investigation",
                          "refactoring",
                          "testing",
                          "documentation",
                          "specification_creation",
                          "planning",
                          "research",
                          "git_operation",
                          "security_scan",
                          "task_management",
                          "clarification_needed"
                        ],
                        "description": "Primary type of intent identified"
                      },
                      "description": {
                        "type": "string",
                        "description": "Clear description of what the user wants to accomplish"
                      },
                      "domain_scope": {
                        "type": "array",
                        "items": { "type": "string" },
                        "description": "Directories/files involved (e.g., '.claude/**', 'packages/**', 'docs/**')"
                      },
                      "confidence": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "description": "Confidence in this intent classification"
                      },
                      "priority": {
                        "enum": ["critical", "high", "medium", "low"],
                        "description": "Priority level of this intent"
                      }
                    },
                    "required": ["intent_type", "description", "domain_scope", "confidence", "priority"]
                  },
                  "minItems": 1,
                  "description": "List of user intents identified from the request"
                },
                "task_graph": {
                  "type": "object",
                  "properties": {
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "node_id": {
                            "type": "string",
                            "description": "Unique identifier for this task node"
                          },
                          "task_description": {
                            "type": "string",
                            "description": "Clear description of the task"
                          },
                          "suggested_agent": {
                            "type": "string",
                            "description": "Agent best suited for this task"
                          },
                          "estimated_complexity": {
                            "enum": ["trivial", "simple", "moderate", "complex", "very_complex"],
                            "description": "Estimated complexity level"
                          },
                          "blocking": {
                            "type": "boolean",
                            "description": "Whether this task blocks others"
                          }
                        },
                        "required": ["node_id", "task_description", "suggested_agent", "estimated_complexity"]
                      },
                      "description": "Individual tasks identified from user request"
                    },
                    "edges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "from_node": {
                            "type": "string",
                            "description": "Node ID that must complete first"
                          },
                          "to_node": {
                            "type": "string",
                            "description": "Node ID that depends on from_node"
                          },
                          "dependency_type": {
                            "enum": ["hard", "soft", "data_flow", "sequential"],
                            "description": "Type of dependency relationship"
                          },
                          "reason": {
                            "type": "string",
                            "description": "Why this dependency exists"
                          }
                        },
                        "required": ["from_node", "to_node", "dependency_type", "reason"]
                      },
                      "description": "Dependencies between tasks"
                    }
                  },
                  "required": ["nodes", "edges"],
                  "description": "Dependency graph representing task relationships"
                },
                "execution_order": {
                  "type": "object",
                  "properties": {
                    "parallel_groups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "group_id": {
                            "type": "integer",
                            "description": "Execution order (0 = first, 1 = second, etc.)"
                          },
                          "tasks": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "Task node IDs that can execute in parallel"
                          },
                          "rationale": {
                            "type": "string",
                            "description": "Why these tasks can run in parallel"
                          }
                        },
                        "required": ["group_id", "tasks", "rationale"]
                      },
                      "description": "Groups of tasks that can execute in parallel"
                    },
                    "critical_path": {
                      "type": "array",
                      "items": { "type": "string" },
                      "description": "Task node IDs on the critical path (longest sequence)"
                    },
                    "suggested_batch_size": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "description": "Maximum agents to run in parallel based on task complexity"
                    }
                  },
                  "required": ["parallel_groups", "critical_path", "suggested_batch_size"],
                  "description": "Recommended execution order for optimal parallelization"
                },
                "implicit_requirements": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "requirement": {
                        "type": "string",
                        "description": "Unstated requirement inferred from context"
                      },
                      "source": {
                        "enum": ["domain_knowledge", "project_standards", "previous_context", "best_practices", "safety_consideration"],
                        "description": "How this requirement was identified"
                      },
                      "rationale": {
                        "type": "string",
                        "description": "Why this requirement is necessary"
                      },
                      "priority": {
                        "enum": ["mandatory", "recommended", "optional"],
                        "description": "Importance of this requirement"
                      }
                    },
                    "required": ["requirement", "source", "rationale", "priority"]
                  },
                  "description": "Requirements not explicitly stated but necessary for success"
                },
                "complexity_estimate": {
                  "type": "object",
                  "properties": {
                    "total_estimated_hours": {
                      "type": "number",
                      "minimum": 0,
                      "description": "Estimated hours for all tasks"
                    },
                    "sprint_points": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 13,
                      "description": "Fibonacci estimate (1, 2, 3, 5, 8, 13)"
                    },
                    "risk_factors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "factor": { "type": "string" },
                          "impact": { "enum": ["low", "medium", "high", "critical"] },
                          "mitigation": { "type": "string" }
                        },
                        "required": ["factor", "impact", "mitigation"]
                      },
                      "description": "Identified risks that could affect estimates"
                    },
                    "confidence_level": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Confidence in the complexity estimate"
                    },
                    "estimation_method": {
                      "enum": ["analogy", "expert_judgment", "decomposition", "historical_data"],
                      "description": "Method used for estimation"
                    }
                  },
                  "required": ["total_estimated_hours", "sprint_points", "risk_factors", "confidence_level", "estimation_method"],
                  "description": "Effort estimation for the entire request"
                },
                "clarifications_needed": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "question": {
                        "type": "string",
                        "description": "Question to ask the user"
                      },
                      "context": {
                        "type": "string",
                        "description": "Why this clarification is needed"
                      },
                      "blocking": {
                        "type": "boolean",
                        "description": "Whether work can proceed without this answer"
                      },
                      "default_assumption": {
                        "type": "string",
                        "description": "Assumption to use if user doesn't respond"
                      }
                    },
                    "required": ["question", "context", "blocking"]
                  },
                  "description": "Questions that need user clarification"
                },
                "delegation_confidence_scores": {
                  "type": "object",
                  "properties": {
                    "task_complexity": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Complexity score component for DCS calculation"
                    },
                    "agent_fit": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Agent fitness score component for DCS calculation"
                    },
                    "context_quality": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Available context quality score"
                    },
                    "cost_benefit": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Cost/benefit ratio score"
                    },
                    "overall_dcs": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "description": "Delegation Confidence Score (DCS) = (task_complexity × 0.4) + (agent_fit × 0.3) + (context_quality × 0.2) + (cost_benefit × 0.1)"
                    },
                    "recommendation": {
                      "enum": ["must_delegate", "should_delegate", "may_delegate", "handle_directly"],
                      "description": "Recommendation based on DCS thresholds (≥0.70, 0.50-0.69, 0.30-0.49, <0.30)"
                    }
                  },
                  "required": ["task_complexity", "agent_fit", "context_quality", "cost_benefit", "overall_dcs", "recommendation"],
                  "description": "Delegation Confidence Score components for orchestrator decision making"
                }
              },
              "required": [
                "intents_identified",
                "task_graph",
                "execution_order",
                "implicit_requirements",
                "complexity_estimate",
                "clarifications_needed",
                "delegation_confidence_scores"
              ]
            }
          },
          "required": ["status", "agent", "task_id", "operation_type", "summary", "confidence", "execution_timestamp", "agent_specific_output"],
          "additionalProperties": false
        },
        {
          "title": "Intent Analysis Failure",
          "properties": {
            "status": { "const": "FAILURE" },
            "agent": { "const": "intent-analyzer" },
            "task_id": { "type": "string" },
            "operation_type": { "const": "analyze_intent" },
            "summary": {
              "type": "string",
              "description": "Summary of why intent analysis failed"
            },
            "confidence": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Confidence level in failure diagnosis"
            },
            "execution_timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 UTC timestamp from orchestrator"
            },
            "failure_details": {
              "type": "object",
              "properties": {
                "failure_type": {
                  "enum": [
                    "ambiguous_request",
                    "insufficient_context",
                    "conflicting_intents",
                    "unsupported_operation",
                    "system_state_error",
                    "analysis_error"
                  ],
                  "description": "Primary type of failure"
                },
                "reasons": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Specific reasons why intent analysis failed"
                },
                "ambiguities_detected": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ambiguity": { "type": "string" },
                      "possible_interpretations": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "recommended_clarification": { "type": "string" }
                    },
                    "required": ["ambiguity", "possible_interpretations", "recommended_clarification"]
                  },
                  "description": "Ambiguities that prevented successful analysis"
                },
                "partial_analysis": {
                  "type": "object",
                  "description": "Any partial intent analysis completed before failure",
                  "properties": {
                    "intents_identified": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "confidence": { "type": "number", "minimum": 0, "maximum": 1 }
                  }
                },
                "recovery_suggestions": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "Suggested approaches to resolve the failure"
                }
              },
              "required": ["failure_type", "reasons", "recovery_suggestions"]
            }
          },
          "required": ["status", "agent", "task_id", "operation_type", "summary", "confidence", "execution_timestamp", "failure_details"],
          "additionalProperties": false
        }
      ]
    }
  },
  "required": ["input", "output"]
}
